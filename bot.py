import logging
import asyncio
import json
import os
import re
from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ChatMemberAdministrator,
    ChatMemberOwner,
)
from aiogram.filters import CommandStart, Command
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv


class ChangeWordsState(StatesGroup):
    waiting_for_words = State()


router = Router()

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "bot_data.json"

bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
waiting_for_words = {}


async def is_admin(chat_id: int, user_id: int) -> bool:
    chat_member = await bot.get_chat_member(chat_id, user_id)
    return chat_member.status not in ["creator", "administrator"]


# üìÇ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ JSON"""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {"filter": [], "admins": []}


def save_data(data, file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON"""
    with open(file, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)


config = load_data()


# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"),
                KeyboardButton(text="‚úíÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"),
            ],
        ],
        resize_keyboard=True,
    )
    return keyboard


# üéõ –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ–Ω—é"""
    if await is_admin(message.chat.id, message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–ª—å—Ç—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
    )


# üéõ –ö–æ–º–∞–Ω–¥–∞ /menu
@router.message(Command("menu"))
async def menu_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    if await is_admin(message.chat.id, message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# üìú –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
@router.message(lambda message: message.text == "üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
async def list_words(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
    if await is_admin(message.chat.id, message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    word_list = (
        "\n".join([f"‚Üí {word}" for word in config["filter"]])
        if config["filter"]
        else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    )
    await message.answer(f"üìú –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: \n{word_list}", parse_mode="HTML")


# ‚úíÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
@router.message(F.text == "‚úíÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
async def change_words(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤."""
    if await is_admin(message.chat.id, message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    await state.set_state(ChangeWordsState.waiting_for_words)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(ChangeWordsState.waiting_for_words)
async def process_change_words(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤."""
    new_words = message.text
    config["filter"] = [word.strip() for word in new_words.split(",") if word.strip()]
    save_data(config, DATA_FILE)

    await message.answer(f"–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {config['filter']}")
    await state.clear()


# üìå –§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def filter_messages(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
    if any(word in message.text.lower() for word in set(config["filter"])):
        found_words = [
            word for word in set(config["filter"]) if word in message.text.lower()
        ]

        chat_id = str(message.chat.id)
        if chat_id.startswith("-100"):
            chat_id = int(chat_id[4:])
        chat_link = f"<a href='https://t.me/{message.chat.username or f'c/{abs(chat_id)}'}'>{message.chat.title}</a>"
        message_link = f"<a href='https://t.me/c/{abs(chat_id)}/{message.message_id}'>–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>"

        highlighted_text = message.text
        for word in found_words:
            highlighted_text = re.sub(
                rf"\b{re.escape(word)}\b",
                lambda match: f"<b><u>{match.group()}</u></b>",
                highlighted_text,
                flags=re.IGNORECASE,
            )

        chat_admins = await bot.get_chat_administrators(message.chat.id)
        for admin in chat_admins:
            if (
                isinstance(admin, (ChatMemberAdministrator, ChatMemberOwner))
                and not admin.user.is_bot
            ):
                await bot.send_message(
                    admin.user.id,
                    f"‚ö†Ô∏è –í —á–∞—Ç–µ {chat_link} –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:\n\n"
                    f"üë§ –û—Ç: {message.from_user.full_name} (@{message.from_user.username})\n"
                    f"üìç –ß–∞—Ç: {chat_link}\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {highlighted_text}\n\n"
                    f"üîó {message_link}",
                    parse_mode="HTML",
                )


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
